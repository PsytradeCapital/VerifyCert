{
  "timestamp": "2025-08-05T07:49:12.984Z",
  "summary": {
    "totalItems": 14,
    "totalPassed": 14,
    "successRate": "100.0"
  },
  "results": {
    "components": {
      "passed": 10,
      "failed": 0,
      "details": [
        {
          "name": "BottomNavigation",
          "status": "partial",
          "message": "Found 4/5 features",
          "features": [
            "Mobile-optimized navigation",
            "Keyboard navigation support",
            "Active state indication",
            "Badge support"
          ],
          "missing": [
            "Accessibility attributes"
          ],
          "lineCount": 170
        },
        {
          "name": "FloatingActionButton",
          "status": "partial",
          "message": "Found 4/5 features",
          "features": [
            "Multiple action support",
            "Extended variant with label",
            "Position variants",
            "Size variants"
          ],
          "missing": [
            "Smooth animations"
          ],
          "lineCount": 162
        },
        {
          "name": "Button",
          "status": "partial",
          "message": "Found 4/5 features",
          "features": [
            "Size variants (xs, sm, md, lg, xl)",
            "Loading states with spinner",
            "Icon support",
            "Rounded variants"
          ],
          "missing": [
            "Multiple variants (primary, secondary, danger, success, etc.)"
          ],
          "lineCount": 129
        },
        {
          "name": "Card",
          "status": "partial",
          "message": "Found 2/4 features",
          "features": [
            "Header and footer support",
            "Clickable cards"
          ],
          "missing": [
            "Multiple variants (default, elevated, outlined)",
            "Responsive design"
          ],
          "lineCount": 158
        },
        {
          "name": "HeroSection",
          "status": "partial",
          "message": "Found 2/4 features",
          "features": [
            "QR code scanner integration",
            "Action buttons"
          ],
          "missing": [
            "Clear call-to-action",
            "Responsive layout"
          ],
          "lineCount": 215
        },
        {
          "name": "VerificationResults",
          "status": "partial",
          "message": "Found 2/4 features",
          "features": [
            "Certificate information display",
            "Share and download functionality"
          ],
          "missing": [
            "Success/error state display",
            "Visual feedback animations"
          ],
          "lineCount": 143
        },
        {
          "name": "CertificateCard",
          "status": "partial",
          "message": "Found 2/4 features",
          "features": [
            "Certificate actions (share, download, verify)",
            "Valid/invalid state indication"
          ],
          "missing": [
            "Professional styling",
            "Print-friendly styling"
          ],
          "lineCount": 366
        },
        {
          "name": "CertificateAnalytics",
          "status": "partial",
          "message": "Found 2/4 features",
          "features": [
            "Data visualization",
            "Chart components"
          ],
          "missing": [
            "Statistics display",
            "Responsive charts"
          ],
          "lineCount": 188
        },
        {
          "name": "SettingsPanel",
          "status": "passed",
          "message": "Found 4/4 features",
          "features": [
            "Profile management interface",
            "Notification preferences",
            "Theme settings",
            "Save functionality"
          ],
          "missing": [],
          "lineCount": 420
        },
        {
          "name": "FeedbackAnimations",
          "status": "partial",
          "message": "Found 2/4 features",
          "features": [
            "Success/error feedback animations",
            "Toast notifications"
          ],
          "missing": [
            "Auto-dismiss functionality",
            "Screen reader announcements"
          ],
          "lineCount": 231
        }
      ]
    },
    "tests": {
      "passed": 3,
      "failed": 0,
      "details": [
        {
          "file": "src/tests/ui-components.test.tsx",
          "exists": true,
          "hasContent": true,
          "lineCount": 562,
          "content": "import React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport '@testing-library/jest-dom';\r\n\r\n// Import all components\r\nimport { BottomNavigation } from '../components/ui/Navigation/BottomNavigation';\r\nimport { FloatingActionButton } from '../components/ui/FloatingActionButton/FloatingActionButton';\r\nimport Button from '../components/ui/Button/Button';\r\nimport { FeedbackAnimation, toast } from '../components/ui/Feedback/FeedbackAnimations';\r\nimport { Card } from '../components/ui/Card/Card';\r\nimport { HeroSection } from '../components/ui/Hero/HeroSection';\r\nimport { VerificationResults } from '../components/ui/VerificationResults/VerificationResults';\r\nimport { CertificateCard } from '../components/ui/CertificateCard/CertificateCard';\r\nimport { CertificateAnalytics } from '../components/ui/Analytics/CertificateAnalytics';\r\nimport { SettingsPanel } from '../components/ui/Settings/SettingsPanel';\r\n\r\n// Mock framer-motion\r\njest.mock('framer-motion', () => ({\r\n  motion: {\r\n    div: ({ children, ...props }: any) => <div {...props}>{children}</div>,\r\n    button: ({ children, ...props }: any) => <button {...props}>{children}</button>,\r\n    nav: ({ children, ...props }: any) => <nav {...props}>{children}</nav>,\r\n  },\r\n  AnimatePresence: ({ children }: any) => <>{children}</>,\r\n}));\r\n\r\n// Mock lucide-react icons\r\njest.mock('lucide-react', () => ({\r\n  Home: () => <div data-testid=\"home-icon\">Home</div>,\r\n  Search: () => <div data-testid=\"search-icon\">Search</div>,\r\n  FileText: () => <div data-testid=\"file-icon\">File</div>,\r\n  User: () => <div data-testid=\"user-icon\">User</div>,\r\n  Plus: () => <div data-testid=\"plus-icon\">Plus</div>,\r\n  Download: () => <div data-testid=\"download-icon\">Download</div>,\r\n  Share2: () => <div data-testid=\"share-icon\">Share</div>,\r\n  CheckCircle: () => <div data-testid=\"check-icon\">Check</div>,\r\n  XCircle: () => <div data-testid=\"x-icon\">X</div>,\r\n  AlertTriangle: () => <div data-testid=\"alert-icon\">Alert</div>,\r\n  Info: () => <div data-testid=\"info-icon\">Info</div>,\r\n  X: () => <div data-testid=\"close-icon\">Close</div>,\r\n  Loader2: () => <div data-testid=\"loader-icon\">Loading</div>,\r\n  QrCode: () => <div data-testid=\"qr-icon\">QR</div>,\r\n  Upload: () => <div data-testid=\"upload-icon\">Upload</div>,\r\n  ArrowRight: () => <div data-testid=\"arrow-icon\">Arrow</div>,\r\n  Shield: () => <div data-testid=\"shield-icon\">Shield</div>,\r\n  Eye: () => <div data-testid=\"eye-icon\">Eye</div>,\r\n  Copy: () => <div data-testid=\"copy-icon\">Copy</div>,\r\n  Calendar: () => <div data-testid=\"calendar-icon\">Calendar</div>,\r\n  Building: () => <div data-testid=\"building-icon\">Building</div>,\r\n  Award: () => <div data-testid=\"award-icon\">Award</div>,\r\n  Bell: () => <div data-testid=\"bell-icon\">Bell</div>,\r\n  Palette: () => <div data-testid=\"palette-icon\">Palette</div>,\r\n  Save: () => <div data-testid=\"save-icon\">Save</div>,\r\n  Trash2: () => <div data-testid=\"trash-icon\">Trash</div>,\r\n  Camera: () => <div data-testid=\"camera-icon\">Camera</div>,\r\n  BarChart3: () => <div data-testid=\"chart-icon\">Chart</div>,\r\n  TrendingUp: () => <div data-testid=\"trending-icon\">Trending</div>,\r\n  Users: () => <div data-testid=\"users-icon\">Users</div>,\r\n  Settings: () => <div data-testid=\"settings-icon\">Settings</div>,\r\n}));\r\n\r\nconst RouterWrapper = ({ children }: { children: React.ReactNode }) => (\r\n  <BrowserRouter>{children}</BrowserRouter>\r\n);\r\n\r\ndescribe('UI Components', () => {\r\n  describe('BottomNavigation', () => {\r\n    it('renders navigation items correctly', () => {\r\n      render(\r\n        <RouterWrapper>\r\n          <BottomNavigation />\r\n        </RouterWrapper>\r\n      );\r\n\r\n      expect(screen.getByText('Home')).toBeInTheDocument();\r\n      expect(screen.getByText('Verify')).toBeInTheDocument();\r\n      expect(screen.getByText('Certificates')).toBeInTheDocument();\r\n      expect(screen.getByText('Profile')).toBeInTheDocument();\r\n    });\r\n\r\n    it('handles keyboard navigation', () => {\r\n      render(\r\n        <RouterWrapper>\r\n          <BottomNavigation />\r\n        </RouterWrapper>\r\n      );\r\n\r\n      const firstItem = screen.getByText('Home').closest('a');\r\n      if (firstItem) {\r\n        fireEvent.keyDown(firstItem, { key: 'ArrowRight' });\r\n        // Test that focus moves to next item\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('FloatingActionButton', () => {\r\n    it('renders main button correctly', () => {\r\n      const mockClick = jest.fn();\r\n      render(<FloatingActionButton onClick={mockClick} />);\r\n\r\n      const button = screen.getByRole('button');\r\n      expect(button).toBeInTheDocument();\r\n      \r\n      fireEvent.click(button);\r\n      expect(mockClick).toHaveBeenCalled();\r\n    });\r\n\r\n    it('expands to show actions when provided', () => {\r\n      const actions = [\r\n        { id: '1', label: 'Action 1', icon: <div>Icon</div>, onClick: jest.fn() },\r\n        { id: '2', label: 'Action 2', icon: <div>Icon</div>, onClick: jest.fn() },\r\n      ];\r\n\r\n      render(<FloatingActionButton actions={actions} />);\r\n\r\n      const button = screen.getByRole('button');\r\n      fireEvent.click(button);\r\n\r\n      expect(screen.getByText('Action 1')).toBeInTheDocument();\r\n      expect(screen.getByText('Action 2')).toBeInTheDocument();\r\n    });\r\n\r\n    it('handles extended variant with label', () => {\r\n      render(<FloatingActionButton variant=\"extended\" label=\"Create New\" />);\r\n      expect(screen.getByText('Create New')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('Button', () => {\r\n    it('renders with different variants', () => {\r\n      const { rerender } = render(<Button variant=\"primary\">Primary</Button>);\r\n      expect(screen.getByRole('button')).toHaveClass('bg-blue-600');\r\n\r\n      rerender(<Button variant=\"danger\">Danger</Button>);\r\n      expect(screen.getByRole('button')).toHaveClass('bg-red-600');\r\n\r\n      rerender(<Button variant=\"success\">Success</Button>);\r\n      expect(screen.getByRole('button')).toHaveClass('bg-green-600');\r\n    });\r\n\r\n    it('shows loading state correctly', () => {\r\n      render(<Button loading loadingText=\"Saving...\">Save</Button>);\r\n      expect(screen.getByTestId('loader-icon')).toBeInTheDocument();\r\n      expect(screen.getByText('Saving...')).toBeInTheDocument();\r\n    });\r\n\r\n    it('handles different sizes', () => {\r\n      const { rerender } = render(<Button size=\"sm\">Small</Button>);\r\n      expect(screen.getByRole('button')).toHaveClass('px-3', 'py-1.5', 'text-sm');\r\n\r\n      rerender(<Button size=\"lg\">Large</Button>);\r\n      expect(screen.getByRole('button')).toHaveClass('px-6', 'py-3', 'text-base');\r\n    });\r\n\r\n    it('renders with icons', () => {\r\n      render(<Button icon={<div data-testid=\"test-icon\">Icon</div>}>With Icon</Button>);\r\n      expect(screen.getByTestId('test-icon')).toBeInTheDocument();\r\n    });\r\n\r\n    it('is disabled when loading or disabled prop is true', () => {\r\n      const { rerender } = render(<Button loading>Loading</Button>);\r\n      expect(screen.getByRole('button')).toBeDisabled();\r\n\r\n      rerender(<Button disabled>Disabled</Button>);\r\n      expect(screen.getByRole('button')).toBeDisabled();\r\n    });\r\n  });\r\n\r\n  describe('Card', () => {\r\n    it('renders with different variants', () => {\r\n      const { rerender } = render(<Card variant=\"default\">Default Card</Card>);\r\n      expect(screen.getByText('Default Card')).toBeInTheDocument();\r\n\r\n      rerender(<Card variant=\"elevated\">Elevated Card</Card>);\r\n      expect(screen.getByText('Elevated Card')).toBeInTheDocument();\r\n\r\n      rerender(<Card variant=\"outlined\">Outlined Card</Card>);\r\n      expect(screen.getByText('Outlined Card')).toBeInTheDocument();\r\n    });\r\n\r\n    it('renders header and footer when provided', () => {\r\n      render(\r\n        <Card \r\n          header={<div>Card Header</div>}\r\n          footer={<div>Card Footer</div>}\r\n        >\r\n          Card Content\r\n        </Card>\r\n      );\r\n\r\n      expect(screen.getByText('Card Header')).toBeInTheDocument();\r\n      expect(screen.getByText('Card Content')).toBeInTheDocument();\r\n      expect(screen.getByText('Card Footer')).toBeInTheDocument();\r\n    });\r\n\r\n    it('handles click events when clickable', () => {\r\n      const mockClick = jest.fn();\r\n      render(<Card clickable onClick={mockClick}>Clickable Card</Card>);\r\n\r\n      fireEvent.click(screen.getByText('Clickable Card'));\r\n      expect(mockClick).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('HeroSection', () => {\r\n    it('renders title and subtitle', () => {\r\n      render(\r\n        <HeroSection \r\n          title=\"Welcome to VerifyCert\"\r\n          subtitle=\"Secure certificate verification\"\r\n        />\r\n      );\r\n\r\n      expect(screen.getByText('Welcome to VerifyCert')).toBeInTheDocument();\r\n      expect(screen.getByText('Secure certificate verification')).toBeInTheDocument();\r\n    });\r\n\r\n    it('renders call-to-action buttons', () => {\r\n      const actions = [\r\n        { label: 'Get Started', onClick: jest.fn(), variant: 'primary' as const },\r\n        { label: 'Learn More', onClick: jest.fn(), variant: 'secondary' as const },\r\n      ];\r\n\r\n      render(<HeroSection title=\"Test\" actions={actions} />);\r\n\r\n      expect(screen.getByText('Get Started')).toBeInTheDocument();\r\n      expect(screen.getByText('Learn More')).toBeInTheDocument();\r\n    });\r\n\r\n    it('shows QR scanner when enabled', () => {\r\n      render(<HeroSection title=\"Test\" showQRScanner />);\r\n      expect(screen.getByTestId('qr-icon')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('VerificationResults', () => {\r\n    it('displays success state correctly', () => {\r\n      const result = {\r\n        status: 'success' as const,\r\n        certificate: {\r\n          id: '123',\r\n          recipientName: 'John Doe',\r\n          courseName: 'React Development',\r\n          institution: 'Tech Academy',\r\n          issueDate: '2024-01-15',\r\n          isValid: true\r\n        }\r\n      };\r\n\r\n      render(<VerificationResults result={result} />);\r\n\r\n      expect(screen.getByText('Certificate Verified')).toBeInTheDocument();\r\n      expect(screen.getByText('John Doe')).toBeInTheDocument();\r\n      expect(screen.getByText('React Development')).toBeInTheDocument();\r\n      expect(screen.getByTestId('check-icon')).toBeInTheDocument();\r\n    });\r\n\r\n    it('displays error state correctly', () => {\r\n      const result = {\r\n        status: 'error' as const,\r\n        message: 'Certificate not found'\r\n      };\r\n\r\n      render(<VerificationResults result={result} />);\r\n\r\n      expect(screen.getByText('Verification Failed')).toBeInTheDocument();\r\n      expect(screen.getByText('Certificate not found')).toBeInTheDocument();\r\n      expect(screen.getByTestId('x-icon')).toBeInTheDocument();\r\n    });\r\n\r\n    it('handles share and download actions', () => {\r\n      const mockShare = jest.fn();\r\n      const mockDownload = jest.fn();\r\n      \r\n      const result = {\r\n        status: 'success' as const,\r\n        certificate: {\r\n          id: '123',\r\n          recipientName: 'John Doe',\r\n          courseName: 'React Development',\r\n          institution: 'Tech Academy',\r\n          issueDate: '2024-01-15',\r\n          isValid: true\r\n        }\r\n      };\r\n\r\n      render(\r\n        <VerificationResults \r\n          result={result} \r\n          onShare={mockShare}\r\n          onDownload={mockDownload}\r\n        />\r\n      );\r\n\r\n      fireEvent.click(screen.getByText('Share'));\r\n      expect(mockShare).toHaveBeenCalled();\r\n\r\n      fireEvent.click(screen.getByText('Download'));\r\n      expect(mockDownload).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('CertificateCard', () => {\r\n    const mockCertificate = {\r\n      id: '123',\r\n      recipientName: 'John Doe',\r\n      courseName: 'React Development',\r\n      institution: 'Tech Academy',\r\n      issueDate: '2024-01-15',\r\n      isValid: true,\r\n      description: 'Advanced React course completion'\r\n    };\r\n\r\n    it('renders certificate information correctly', () => {\r\n      render(<CertificateCard certificate={mockCertificate} />);\r\n\r\n      expect(screen.getByText('John Doe')).toBeInTheDocument();\r\n      expect(screen.getByText('React Development')).toBeInTheDocument();\r\n      expect(screen.getByText('Tech Academy')).toBeInTheDocument();\r\n    });\r\n\r\n    it('handles certificate actions', () => {\r\n      const mockShare = jest.fn();\r\n      const mockDownload = jest.fn();\r\n      const mockVerify = jest.fn();\r\n\r\n      render(\r\n        <CertificateCard \r\n          certificate={mockCertificate}\r\n          onShare={mockShare}\r\n          onDownload={mockDownload}\r\n          onVerify={mockVerify}\r\n        />\r\n      );\r\n\r\n      fireEvent.click(screen.getByTestId('share-icon'));\r\n      expect(mockShare).toHaveBeenCalled();\r\n\r\n      fireEvent.click(screen.getByTestId('download-icon'));\r\n      expect(mockDownload).toHaveBeenCalled();\r\n    });\r\n\r\n    it('shows different styles for valid/invalid certificates', () => {\r\n      const { rerender } = render(\r\n        <CertificateCard certificate={{ ...mockCertificate, isValid: true }} />\r\n      );\r\n      expect(screen.getByTestId('check-icon')).toBeInTheDocument();\r\n\r\n      rerender(\r\n        <CertificateCard certificate={{ ...mockCertificate, isValid: false }} />\r\n      );\r\n      expect(screen.getByTestId('x-icon')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('CertificateAnalytics', () => {\r\n    const mockData = {\r\n      totalCertificates: 150,\r\n      validCertificates: 145,\r\n      invalidCertificates: 5,\r\n      recentActivity: [\r\n        { date: '2024-01-15', count: 10 },\r\n        { date: '2024-01-14', count: 8 },\r\n      ],\r\n      topInstitutions: [\r\n        { name: 'Tech Academy', count: 50 },\r\n        { name: 'Code School', count: 30 },\r\n      ]\r\n    };\r\n\r\n    it('displays analytics data correctly', () => {\r\n      render(<CertificateAnalytics data={mockData} />);\r\n\r\n      expect(screen.getByText('150')).toBeInTheDocument();\r\n      expect(screen.getByText('145')).toBeInTheDocument();\r\n      expect(screen.getByText('5')).toBeInTheDocument();\r\n    });\r\n\r\n    it('renders charts and visualizations', () => {\r\n      render(<CertificateAnalytics data={mockData} />);\r\n      expect(screen.getByTestId('chart-icon')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('SettingsPanel', () => {\r\n    it('renders settings sections', () => {\r\n      render(<SettingsPanel />);\r\n\r\n      expect(screen.getByText('Profile Settings')).toBeInTheDocument();\r\n      expect(screen.getByText('Notification Preferences')).toBeInTheDocument();\r\n      expect(screen.getByText('Theme')).toBeInTheDocument();\r\n    });\r\n\r\n    it('handles settings changes', async () => {\r\n      const mockOnChange = jest.fn();\r\n      render(<SettingsPanel onChange={mockOnChange} />);\r\n\r\n      const toggle = screen.getByRole('switch');\r\n      fireEvent.click(toggle);\r\n\r\n      await waitFor(() => {\r\n        expect(mockOnChange).toHaveBeenCalled();\r\n      });\r\n    });\r\n\r\n    it('saves settings correctly', async () => {\r\n      const mockOnSave = jest.fn();\r\n      render(<SettingsPanel onSave={mockOnSave} />);\r\n\r\n      fireEvent.click(screen.getByText('Save Settings'));\r\n\r\n      await waitFor(() => {\r\n        expect(mockOnSave).toHaveBeenCalled();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('FeedbackAnimations', () => {\r\n    it('shows success toast', () => {\r\n      render(<FeedbackAnimation type=\"success\" message=\"Success!\" />);\r\n      expect(screen.getByText('Success!')).toBeInTheDocument();\r\n      expect(screen.getByTestId('check-icon')).toBeInTheDocument();\r\n    });\r\n\r\n    it('shows error toast', () => {\r\n      render(<FeedbackAnimation type=\"error\" message=\"Error occurred!\" />);\r\n      expect(screen.getByText('Error occurred!')).toBeInTheDocument();\r\n      expect(screen.getByTestId('x-icon')).toBeInTheDocument();\r\n    });\r\n\r\n    it('auto-dismisses after timeout', async () => {\r\n      const { container } = render(\r\n        <FeedbackAnimation type=\"info\" message=\"Info message\" duration={100} />\r\n      );\r\n\r\n      expect(screen.getByText('Info message')).toBeInTheDocument();\r\n\r\n      await waitFor(() => {\r\n        expect(container.firstChild).toBeNull();\r\n      }, { timeout: 200 });\r\n    });\r\n  });\r\n\r\n  describe('Accessibility', () => {\r\n    it('all interactive elements have proper ARIA labels', () => {\r\n      render(\r\n        <RouterWrapper>\r\n          <div>\r\n            <BottomNavigation />\r\n            <FloatingActionButton aria-label=\"Create new certificate\" />\r\n            <Button aria-label=\"Submit form\">Submit</Button>\r\n          </div>\r\n        </RouterWrapper>\r\n      );\r\n\r\n      expect(screen.getByLabelText('Create new certificate')).toBeInTheDocument();\r\n      expect(screen.getByLabelText('Submit form')).toBeInTheDocument();\r\n    });\r\n\r\n    it('keyboard navigation works correctly', () => {\r\n      render(\r\n        <RouterWrapper>\r\n          <BottomNavigation />\r\n        </RouterWrapper>\r\n      );\r\n\r\n      const firstNavItem = screen.getByText('Home').closest('a');\r\n      if (firstNavItem) {\r\n        firstNavItem.focus();\r\n        expect(document.activeElement).toBe(firstNavItem);\r\n      }\r\n    });\r\n\r\n    it('screen reader announcements work', () => {\r\n      render(<FeedbackAnimation type=\"success\" message=\"Certificate verified successfully\" />);\r\n      \r\n      const announcement = screen.getByRole('status');\r\n      expect(announcement).toBeInTheDocument();\r\n      expect(announcement).toHaveTextContent('Certificate verified successfully');\r\n    });\r\n  });\r\n\r\n  describe('Responsive Design', () => {\r\n    it('components adapt to mobile viewport', () => {\r\n      // Mock mobile viewport\r\n      Object.defineProperty(window, 'innerWidth', {\r\n        writable: true,\r\n        configurable: true,\r\n        value: 375,\r\n      });\r\n\r\n      render(\r\n        <RouterWrapper>\r\n          <BottomNavigation />\r\n        </RouterWrapper>\r\n      );\r\n\r\n      // Bottom navigation should be visible on mobile\r\n      expect(screen.getByRole('tablist')).toBeInTheDocument();\r\n    });\r\n\r\n    it('floating action button positions correctly on different screen sizes', () => {\r\n      const { rerender } = render(<FloatingActionButton position=\"bottom-right\" />);\r\n      expect(screen.getByRole('button')).toHaveClass('bottom-6', 'right-6');\r\n\r\n      rerender(<FloatingActionButton position=\"bottom-left\" />);\r\n      expect(screen.getByRole('button')).toHaveClass('bottom-6', 'left-6');\r\n    });\r\n  });\r\n\r\n  describe('Performance', () => {\r\n    it('components render without performance issues', () => {\r\n      const startTime = performance.now();\r\n      \r\n      render(\r\n        <RouterWrapper>\r\n          <div>\r\n            <HeroSection title=\"Test\" />\r\n            <BottomNavigation />\r\n            <FloatingActionButton />\r\n            <Card>Test Card</Card>\r\n            <Button>Test Button</Button>\r\n          </div>\r\n        </RouterWrapper>\r\n      );\r\n\r\n      const endTime = performance.now();\r\n      const renderTime = endTime - startTime;\r\n\r\n      // Render should complete within reasonable time (100ms)\r\n      expect(renderTime).toBeLessThan(100);\r\n    });\r\n\r\n    it('handles large datasets efficiently', () => {\r\n      const largeCertificateList = Array.from({ length: 100 }, (_, i) => ({\r\n        id: `cert-${i}`,\r\n        recipientName: `User ${i}`,\r\n        courseName: `Course ${i}`,\r\n        institution: 'Test Institution',\r\n        issueDate: '2024-01-15',\r\n        isValid: true\r\n      }));\r\n\r\n      const startTime = performance.now();\r\n      \r\n      render(\r\n        <div>\r\n          {largeCertificateList.map(cert => (\r\n            <CertificateCard key={cert.id} certificate={cert} />\r\n          ))}\r\n        </div>\r\n      );\r\n\r\n      const endTime = performance.now();\r\n      const renderTime = endTime - startTime;\r\n\r\n      // Should handle large lists efficiently\r\n      expect(renderTime).toBeLessThan(500);\r\n    });\r\n  });\r\n});"
        },
        {
          "file": "src/tests/integration.test.tsx",
          "exists": true,
          "hasContent": true,
          "lineCount": 514,
          "content": "import React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport '@testing-library/jest-dom';\r\n\r\n// Import components for integration testing\r\nimport { BottomNavigation } from '../components/ui/Navigation/BottomNavigation';\r\nimport { FloatingActionButton } from '../components/ui/FloatingActionButton/FloatingActionButton';\r\nimport { HeroSection } from '../components/ui/Hero/HeroSection';\r\nimport { VerificationResults } from '../components/ui/VerificationResults/VerificationResults';\r\nimport { CertificateCard } from '../components/ui/CertificateCard/CertificateCard';\r\nimport { FeedbackContext } from '../contexts/FeedbackContext';\r\n\r\n// Mock framer-motion\r\njest.mock('framer-motion', () => ({\r\n  motion: {\r\n    div: ({ children, ...props }: any) => <div {...props}>{children}</div>,\r\n    button: ({ children, ...props }: any) => <button {...props}>{children}</button>,\r\n    nav: ({ children, ...props }: any) => <nav {...props}>{children}</nav>,\r\n  },\r\n  AnimatePresence: ({ children }: any) => <>{children}</>,\r\n}));\r\n\r\n// Mock lucide-react icons\r\njest.mock('lucide-react', () => ({\r\n  Home: () => <div data-testid=\"home-icon\">Home</div>,\r\n  Search: () => <div data-testid=\"search-icon\">Search</div>,\r\n  FileText: () => <div data-testid=\"file-icon\">File</div>,\r\n  User: () => <div data-testid=\"user-icon\">User</div>,\r\n  Plus: () => <div data-testid=\"plus-icon\">Plus</div>,\r\n  Download: () => <div data-testid=\"download-icon\">Download</div>,\r\n  Share2: () => <div data-testid=\"share-icon\">Share</div>,\r\n  CheckCircle: () => <div data-testid=\"check-icon\">Check</div>,\r\n  XCircle: () => <div data-testid=\"x-icon\">X</div>,\r\n  QrCode: () => <div data-testid=\"qr-icon\">QR</div>,\r\n  Upload: () => <div data-testid=\"upload-icon\">Upload</div>,\r\n  ArrowRight: () => <div data-testid=\"arrow-icon\">Arrow</div>,\r\n  Shield: () => <div data-testid=\"shield-icon\">Shield</div>,\r\n  Eye: () => <div data-testid=\"eye-icon\">Eye</div>,\r\n  Copy: () => <div data-testid=\"copy-icon\">Copy</div>,\r\n  Camera: () => <div data-testid=\"camera-icon\">Camera</div>,\r\n}));\r\n\r\nconst RouterWrapper = ({ children }: { children: React.ReactNode }) => (\r\n  <BrowserRouter>{children}</BrowserRouter>\r\n);\r\n\r\nconst FeedbackWrapper = ({ children }: { children: React.ReactNode }) => {\r\n  const mockFeedbackValue = {\r\n    showFeedback: jest.fn(),\r\n    hideFeedback: jest.fn(),\r\n    feedbackState: { isVisible: false, type: 'info', message: '' }\r\n  };\r\n\r\n  return (\r\n    <FeedbackContext.Provider value={mockFeedbackValue}>\r\n      {children}\r\n    </FeedbackContext.Provider>\r\n  );\r\n};\r\n\r\ndescribe('Integration Tests', () => {\r\n  describe('Certificate Verification Flow', () => {\r\n    it('completes full verification workflow', async () => {\r\n      const mockVerify = jest.fn().mockResolvedValue({\r\n        status: 'success',\r\n        certificate: {\r\n          id: '123',\r\n          recipientName: 'John Doe',\r\n          courseName: 'React Development',\r\n          institution: 'Tech Academy',\r\n          issueDate: '2024-01-15',\r\n          isValid: true\r\n        }\r\n      });\r\n\r\n      const TestApp = () => {\r\n        const [result, setResult] = React.useState(null);\r\n\r\n        const handleVerify = async () => {\r\n          const verificationResult = await mockVerify();\r\n          setResult(verificationResult);\r\n        };\r\n\r\n        return (\r\n          <RouterWrapper>\r\n            <FeedbackWrapper>\r\n              <div>\r\n                <HeroSection \r\n                  title=\"Verify Certificate\"\r\n                  showQRScanner\r\n                  onScan={handleVerify}\r\n                />\r\n                {result && <VerificationResults result={result} />}\r\n                <BottomNavigation />\r\n              </div>\r\n            </FeedbackWrapper>\r\n          </RouterWrapper>\r\n        );\r\n      };\r\n\r\n      render(<TestApp />);\r\n\r\n      // Start verification\r\n      const scanButton = screen.getByTestId('qr-icon').closest('button');\r\n      if (scanButton) {\r\n        fireEvent.click(scanButton);\r\n      }\r\n\r\n      // Wait for verification result\r\n      await waitFor(() => {\r\n        expect(screen.getByText('Certificate Verified')).toBeInTheDocument();\r\n        expect(screen.getByText('John Doe')).toBeInTheDocument();\r\n      });\r\n\r\n      expect(mockVerify).toHaveBeenCalled();\r\n    });\r\n\r\n    it('handles verification errors gracefully', async () => {\r\n      const mockVerify = jest.fn().mockRejectedValue(new Error('Network error'));\r\n\r\n      const TestApp = () => {\r\n        const [result, setResult] = React.useState(null);\r\n\r\n        const handleVerify = async () => {\r\n          try {\r\n            const verificationResult = await mockVerify();\r\n            setResult(verificationResult);\r\n          } catch (error) {\r\n            setResult({\r\n              status: 'error',\r\n              message: 'Verification failed. Please try again.'\r\n            });\r\n          }\r\n        };\r\n\r\n        return (\r\n          <RouterWrapper>\r\n            <FeedbackWrapper>\r\n              <div>\r\n                <HeroSection \r\n                  title=\"Verify Certificate\"\r\n                  showQRScanner\r\n                  onScan={handleVerify}\r\n                />\r\n                {result && <VerificationResults result={result} />}\r\n              </div>\r\n            </FeedbackWrapper>\r\n          </RouterWrapper>\r\n        );\r\n      };\r\n\r\n      render(<TestApp />);\r\n\r\n      const scanButton = screen.getByTestId('qr-icon').closest('button');\r\n      if (scanButton) {\r\n        fireEvent.click(scanButton);\r\n      }\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('Verification Failed')).toBeInTheDocument();\r\n        expect(screen.getByText('Verification failed. Please try again.')).toBeInTheDocument();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('Certificate Management Flow', () => {\r\n    it('displays and manages certificate collection', () => {\r\n      const certificates = [\r\n        {\r\n          id: '1',\r\n          recipientName: 'John Doe',\r\n          courseName: 'React Development',\r\n          institution: 'Tech Academy',\r\n          issueDate: '2024-01-15',\r\n          isValid: true\r\n        },\r\n        {\r\n          id: '2',\r\n          recipientName: 'Jane Smith',\r\n          courseName: 'Node.js Basics',\r\n          institution: 'Code School',\r\n          issueDate: '2024-01-10',\r\n          isValid: true\r\n        }\r\n      ];\r\n\r\n      const mockShare = jest.fn();\r\n      const mockDownload = jest.fn();\r\n\r\n      const TestApp = () => (\r\n        <RouterWrapper>\r\n          <FeedbackWrapper>\r\n            <div>\r\n              <div className=\"grid gap-4\">\r\n                {certificates.map(cert => (\r\n                  <CertificateCard\r\n                    key={cert.id}\r\n                    certificate={cert}\r\n                    onShare={mockShare}\r\n                    onDownload={mockDownload}\r\n                  />\r\n                ))}\r\n              </div>\r\n              <FloatingActionButton\r\n                actions={[\r\n                  {\r\n                    id: 'add',\r\n                    label: 'Add Certificate',\r\n                    icon: <div data-testid=\"plus-icon\">Plus</div>,\r\n                    onClick: jest.fn()\r\n                  }\r\n                ]}\r\n              />\r\n              <BottomNavigation />\r\n            </div>\r\n          </FeedbackWrapper>\r\n        </RouterWrapper>\r\n      );\r\n\r\n      render(<TestApp />);\r\n\r\n      // Verify certificates are displayed\r\n      expect(screen.getByText('John Doe')).toBeInTheDocument();\r\n      expect(screen.getByText('Jane Smith')).toBeInTheDocument();\r\n      expect(screen.getByText('React Development')).toBeInTheDocument();\r\n      expect(screen.getByText('Node.js Basics')).toBeInTheDocument();\r\n\r\n      // Test certificate actions\r\n      const shareButtons = screen.getAllByTestId('share-icon');\r\n      fireEvent.click(shareButtons[0]);\r\n      expect(mockShare).toHaveBeenCalledWith(certificates[0]);\r\n\r\n      const downloadButtons = screen.getAllByTestId('download-icon');\r\n      fireEvent.click(downloadButtons[0]);\r\n      expect(mockDownload).toHaveBeenCalledWith(certificates[0]);\r\n    });\r\n  });\r\n\r\n  describe('Navigation Flow', () => {\r\n    it('navigates between different sections', () => {\r\n      const TestApp = () => {\r\n        const [currentSection, setCurrentSection] = React.useState('home');\r\n\r\n        const handleNavigation = (item: any) => {\r\n          setCurrentSection(item.id);\r\n        };\r\n\r\n        return (\r\n          <RouterWrapper>\r\n            <div>\r\n              <div data-testid=\"current-section\">{currentSection}</div>\r\n              <BottomNavigation onItemClick={handleNavigation} />\r\n            </div>\r\n          </RouterWrapper>\r\n        );\r\n      };\r\n\r\n      render(<TestApp />);\r\n\r\n      // Test navigation\r\n      fireEvent.click(screen.getByText('Verify'));\r\n      expect(screen.getByTestId('current-section')).toHaveTextContent('verify');\r\n\r\n      fireEvent.click(screen.getByText('Certificates'));\r\n      expect(screen.getByTestId('current-section')).toHaveTextContent('certificates');\r\n\r\n      fireEvent.click(screen.getByText('Profile'));\r\n      expect(screen.getByTestId('current-section')).toHaveTextContent('profile');\r\n    });\r\n\r\n    it('handles keyboard navigation between sections', () => {\r\n      render(\r\n        <RouterWrapper>\r\n          <BottomNavigation />\r\n        </RouterWrapper>\r\n      );\r\n\r\n      const homeLink = screen.getByText('Home').closest('a');\r\n      if (homeLink) {\r\n        homeLink.focus();\r\n        expect(document.activeElement).toBe(homeLink);\r\n\r\n        // Test arrow key navigation\r\n        fireEvent.keyDown(homeLink, { key: 'ArrowRight' });\r\n        \r\n        // Focus should move to next item\r\n        const verifyLink = screen.getByText('Verify').closest('a');\r\n        // Note: In real implementation, focus would move to verify link\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('Responsive Behavior', () => {\r\n    it('adapts layout for mobile devices', () => {\r\n      // Mock mobile viewport\r\n      Object.defineProperty(window, 'innerWidth', {\r\n        writable: true,\r\n        configurable: true,\r\n        value: 375,\r\n      });\r\n\r\n      render(\r\n        <RouterWrapper>\r\n          <FeedbackWrapper>\r\n            <div>\r\n              <HeroSection title=\"Mobile Test\" />\r\n              <BottomNavigation />\r\n              <FloatingActionButton position=\"bottom-right\" />\r\n            </div>\r\n          </FeedbackWrapper>\r\n        </RouterWrapper>\r\n      );\r\n\r\n      // Bottom navigation should be visible\r\n      expect(screen.getByRole('tablist')).toBeInTheDocument();\r\n      \r\n      // FAB should be positioned correctly\r\n      expect(screen.getByRole('button')).toHaveClass('bottom-6', 'right-6');\r\n    });\r\n\r\n    it('adapts layout for desktop devices', () => {\r\n      // Mock desktop viewport\r\n      Object.defineProperty(window, 'innerWidth', {\r\n        writable: true,\r\n        configurable: true,\r\n        value: 1024,\r\n      });\r\n\r\n      render(\r\n        <RouterWrapper>\r\n          <FeedbackWrapper>\r\n            <div>\r\n              <HeroSection title=\"Desktop Test\" />\r\n              <BottomNavigation />\r\n            </div>\r\n          </FeedbackWrapper>\r\n        </RouterWrapper>\r\n      );\r\n\r\n      // Components should render appropriately for desktop\r\n      expect(screen.getByText('Desktop Test')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    it('handles component errors gracefully', () => {\r\n      const ErrorComponent = () => {\r\n        throw new Error('Test error');\r\n      };\r\n\r\n      const TestApp = () => (\r\n        <RouterWrapper>\r\n          <FeedbackWrapper>\r\n            <div>\r\n              <HeroSection title=\"Error Test\" />\r\n              <ErrorComponent />\r\n            </div>\r\n          </FeedbackWrapper>\r\n        </RouterWrapper>\r\n      );\r\n\r\n      // This would normally be caught by an error boundary\r\n      expect(() => render(<TestApp />)).toThrow('Test error');\r\n    });\r\n\r\n    it('recovers from network failures', async () => {\r\n      const mockApiCall = jest.fn()\r\n        .mockRejectedValueOnce(new Error('Network error'))\r\n        .mockResolvedValueOnce({ success: true });\r\n\r\n      const TestApp = () => {\r\n        const [status, setStatus] = React.useState('idle');\r\n\r\n        const handleRetry = async () => {\r\n          setStatus('loading');\r\n          try {\r\n            await mockApiCall();\r\n            setStatus('success');\r\n          } catch (error) {\r\n            setStatus('error');\r\n          }\r\n        };\r\n\r\n        return (\r\n          <div>\r\n            <div data-testid=\"status\">{status}</div>\r\n            <button onClick={handleRetry}>Retry</button>\r\n          </div>\r\n        );\r\n      };\r\n\r\n      render(<TestApp />);\r\n\r\n      // First attempt fails\r\n      fireEvent.click(screen.getByText('Retry'));\r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('status')).toHaveTextContent('error');\r\n      });\r\n\r\n      // Second attempt succeeds\r\n      fireEvent.click(screen.getByText('Retry'));\r\n      await waitFor(() => {\r\n        expect(screen.getByTestId('status')).toHaveTextContent('success');\r\n      });\r\n\r\n      expect(mockApiCall).toHaveBeenCalledTimes(2);\r\n    });\r\n  });\r\n\r\n  describe('Accessibility Integration', () => {\r\n    it('maintains focus management across components', () => {\r\n      render(\r\n        <RouterWrapper>\r\n          <div>\r\n            <HeroSection title=\"Focus Test\" />\r\n            <BottomNavigation />\r\n            <FloatingActionButton />\r\n          </div>\r\n        </RouterWrapper>\r\n      );\r\n\r\n      // Test tab order\r\n      const focusableElements = screen.getAllByRole('button').concat(\r\n        screen.getAllByRole('link')\r\n      );\r\n\r\n      expect(focusableElements.length).toBeGreaterThan(0);\r\n      \r\n      // Each focusable element should be reachable\r\n      focusableElements.forEach(element => {\r\n        element.focus();\r\n        expect(document.activeElement).toBe(element);\r\n      });\r\n    });\r\n\r\n    it('provides proper screen reader announcements', () => {\r\n      const TestApp = () => {\r\n        const [announcement, setAnnouncement] = React.useState('');\r\n\r\n        const handleAction = () => {\r\n          setAnnouncement('Certificate verified successfully');\r\n        };\r\n\r\n        return (\r\n          <div>\r\n            <button onClick={handleAction}>Verify Certificate</button>\r\n            {announcement && (\r\n              <div role=\"status\" aria-live=\"polite\">\r\n                {announcement}\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      };\r\n\r\n      render(<TestApp />);\r\n\r\n      fireEvent.click(screen.getByText('Verify Certificate'));\r\n      \r\n      const announcement = screen.getByRole('status');\r\n      expect(announcement).toHaveTextContent('Certificate verified successfully');\r\n      expect(announcement).toHaveAttribute('aria-live', 'polite');\r\n    });\r\n  });\r\n\r\n  describe('Performance Integration', () => {\r\n    it('handles concurrent operations efficiently', async () => {\r\n      const mockOperations = Array.from({ length: 10 }, (_, i) => \r\n        jest.fn().mockResolvedValue(`Result ${i}`)\r\n      );\r\n\r\n      const TestApp = () => {\r\n        const [results, setResults] = React.useState<string[]>([]);\r\n\r\n        const handleConcurrentOperations = async () => {\r\n          const promises = mockOperations.map(op => op());\r\n          const allResults = await Promise.all(promises);\r\n          setResults(allResults);\r\n        };\r\n\r\n        return (\r\n          <div>\r\n            <button onClick={handleConcurrentOperations}>\r\n              Run Concurrent Operations\r\n            </button>\r\n            <div data-testid=\"results\">\r\n              {results.map((result, index) => (\r\n                <div key={index}>{result}</div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        );\r\n      };\r\n\r\n      render(<TestApp />);\r\n\r\n      const startTime = performance.now();\r\n      fireEvent.click(screen.getByText('Run Concurrent Operations'));\r\n\r\n      await waitFor(() => {\r\n        expect(screen.getByText('Result 0')).toBeInTheDocument();\r\n        expect(screen.getByText('Result 9')).toBeInTheDocument();\r\n      });\r\n\r\n      const endTime = performance.now();\r\n      const executionTime = endTime - startTime;\r\n\r\n      // Concurrent operations should complete efficiently\r\n      expect(executionTime).toBeLessThan(1000);\r\n      expect(mockOperations.every(op => op.mock.calls.length === 1)).toBe(true);\r\n    });\r\n  });\r\n});"
        },
        {
          "file": "cypress/e2e/ui-ux-complete.cy.js",
          "exists": true,
          "hasContent": true,
          "lineCount": 503,
          "content": "describe('Complete UI/UX Enhancement E2E Tests', () => {\r\n  beforeEach(() => {\r\n    cy.visit('/');\r\n    cy.viewport(1280, 720);\r\n  });\r\n\r\n  describe('Navigation Components', () => {\r\n    it('should navigate using bottom navigation on mobile', () => {\r\n      cy.viewport(375, 667); // Mobile viewport\r\n      \r\n      // Bottom navigation should be visible\r\n      cy.get('[role=\"tablist\"]').should('be.visible');\r\n      \r\n      // Test navigation items\r\n      cy.contains('Home').should('be.visible');\r\n      cy.contains('Verify').should('be.visible');\r\n      cy.contains('Certificates').should('be.visible');\r\n      cy.contains('Profile').should('be.visible');\r\n      \r\n      // Navigate to verify page\r\n      cy.contains('Verify').click();\r\n      cy.url().should('include', '/verify');\r\n      \r\n      // Navigate to certificates page\r\n      cy.contains('Certificates').click();\r\n      cy.url().should('include', '/certificates');\r\n    });\r\n\r\n    it('should handle keyboard navigation in bottom nav', () => {\r\n      cy.viewport(375, 667);\r\n      \r\n      // Focus first navigation item\r\n      cy.contains('Home').focus();\r\n      \r\n      // Use arrow keys to navigate\r\n      cy.focused().type('{rightarrow}');\r\n      cy.focused().should('contain', 'Verify');\r\n      \r\n      cy.focused().type('{rightarrow}');\r\n      cy.focused().should('contain', 'Certificates');\r\n      \r\n      // Test wrap-around navigation\r\n      cy.focused().type('{rightarrow}');\r\n      cy.focused().should('contain', 'Profile');\r\n      \r\n      cy.focused().type('{rightarrow}');\r\n      cy.focused().should('contain', 'Home');\r\n    });\r\n  });\r\n\r\n  describe('Floating Action Button', () => {\r\n    it('should display and interact with FAB', () => {\r\n      // FAB should be visible\r\n      cy.get('[aria-label*=\"action\"]').should('be.visible');\r\n      \r\n      // Click to expand actions\r\n      cy.get('[aria-label*=\"action\"]').click();\r\n      \r\n      // Actions should be visible\r\n      cy.get('[aria-expanded=\"true\"]').should('exist');\r\n      \r\n      // Click outside to collapse\r\n      cy.get('body').click(0, 0);\r\n      cy.get('[aria-expanded=\"false\"]').should('exist');\r\n    });\r\n\r\n    it('should handle FAB with extended variant', () => {\r\n      // Test extended FAB with label\r\n      cy.get('[aria-label*=\"action\"]').should('be.visible');\r\n      \r\n      // Should show label text if extended variant is used\r\n      cy.get('button').contains('Create').should('be.visible');\r\n    });\r\n  });\r\n\r\n  describe('Button Component Variants', () => {\r\n    beforeEach(() => {\r\n      cy.visit('/components-demo'); // Assuming a demo page exists\r\n    });\r\n\r\n    it('should display all button variants correctly', () => {\r\n      // Test different button variants\r\n      cy.get('[data-testid=\"button-primary\"]').should('have.class', 'bg-blue-600');\r\n      cy.get('[data-testid=\"button-secondary\"]').should('have.class', 'bg-gray-100');\r\n      cy.get('[data-testid=\"button-danger\"]').should('have.class', 'bg-red-600');\r\n      cy.get('[data-testid=\"button-success\"]').should('have.class', 'bg-green-600');\r\n    });\r\n\r\n    it('should handle loading states', () => {\r\n      cy.get('[data-testid=\"button-loading\"]').click();\r\n      \r\n      // Should show loading spinner\r\n      cy.get('[data-testid=\"loader-icon\"]').should('be.visible');\r\n      \r\n      // Button should be disabled during loading\r\n      cy.get('[data-testid=\"button-loading\"]').should('be.disabled');\r\n    });\r\n\r\n    it('should handle different sizes', () => {\r\n      cy.get('[data-testid=\"button-small\"]').should('have.class', 'px-3');\r\n      cy.get('[data-testid=\"button-medium\"]').should('have.class', 'px-4');\r\n      cy.get('[data-testid=\"button-large\"]').should('have.class', 'px-6');\r\n    });\r\n  });\r\n\r\n  describe('Card Component', () => {\r\n    it('should display different card variants', () => {\r\n      cy.visit('/cards-demo');\r\n      \r\n      // Test card variants\r\n      cy.get('[data-testid=\"card-default\"]').should('be.visible');\r\n      cy.get('[data-testid=\"card-elevated\"]').should('have.class', 'shadow-lg');\r\n      cy.get('[data-testid=\"card-outlined\"]').should('have.class', 'border');\r\n    });\r\n\r\n    it('should handle clickable cards', () => {\r\n      cy.get('[data-testid=\"card-clickable\"]').click();\r\n      \r\n      // Should trigger click handler\r\n      cy.get('[data-testid=\"click-result\"]').should('contain', 'Card clicked');\r\n    });\r\n  });\r\n\r\n  describe('Hero Section', () => {\r\n    it('should display hero content correctly', () => {\r\n      cy.visit('/');\r\n      \r\n      // Hero title and subtitle should be visible\r\n      cy.get('h1').should('contain', 'VerifyCert');\r\n      cy.get('p').should('contain', 'Secure certificate verification');\r\n      \r\n      // CTA buttons should be present\r\n      cy.contains('Get Started').should('be.visible');\r\n      cy.contains('Learn More').should('be.visible');\r\n    });\r\n\r\n    it('should handle QR scanner integration', () => {\r\n      // QR scanner button should be visible\r\n      cy.get('[data-testid=\"qr-scanner\"]').should('be.visible');\r\n      \r\n      // Click to open scanner\r\n      cy.get('[data-testid=\"qr-scanner\"]').click();\r\n      \r\n      // Scanner modal should open\r\n      cy.get('[role=\"dialog\"]').should('be.visible');\r\n      cy.contains('Scan QR Code').should('be.visible');\r\n    });\r\n  });\r\n\r\n  describe('Verification Results', () => {\r\n    beforeEach(() => {\r\n      cy.visit('/verify');\r\n    });\r\n\r\n    it('should display successful verification', () => {\r\n      // Mock successful verification\r\n      cy.intercept('POST', '/api/verify', {\r\n        statusCode: 200,\r\n        body: {\r\n          status: 'success',\r\n          certificate: {\r\n            id: '123',\r\n            recipientName: 'John Doe',\r\n            courseName: 'React Development',\r\n            institution: 'Tech Academy',\r\n            issueDate: '2024-01-15',\r\n            isValid: true\r\n          }\r\n        }\r\n      }).as('verifySuccess');\r\n\r\n      // Trigger verification\r\n      cy.get('[data-testid=\"verify-input\"]').type('test-certificate-id');\r\n      cy.get('[data-testid=\"verify-button\"]').click();\r\n\r\n      cy.wait('@verifySuccess');\r\n\r\n      // Should show success state\r\n      cy.contains('Certificate Verified').should('be.visible');\r\n      cy.contains('John Doe').should('be.visible');\r\n      cy.contains('React Development').should('be.visible');\r\n      cy.get('[data-testid=\"check-icon\"]').should('be.visible');\r\n    });\r\n\r\n    it('should display verification error', () => {\r\n      // Mock failed verification\r\n      cy.intercept('POST', '/api/verify', {\r\n        statusCode: 404,\r\n        body: {\r\n          status: 'error',\r\n          message: 'Certificate not found'\r\n        }\r\n      }).as('verifyError');\r\n\r\n      cy.get('[data-testid=\"verify-input\"]').type('invalid-certificate-id');\r\n      cy.get('[data-testid=\"verify-button\"]').click();\r\n\r\n      cy.wait('@verifyError');\r\n\r\n      // Should show error state\r\n      cy.contains('Verification Failed').should('be.visible');\r\n      cy.contains('Certificate not found').should('be.visible');\r\n      cy.get('[data-testid=\"x-icon\"]').should('be.visible');\r\n    });\r\n\r\n    it('should handle share and download actions', () => {\r\n      // Setup successful verification first\r\n      cy.intercept('POST', '/api/verify', {\r\n        statusCode: 200,\r\n        body: {\r\n          status: 'success',\r\n          certificate: {\r\n            id: '123',\r\n            recipientName: 'John Doe',\r\n            courseName: 'React Development',\r\n            institution: 'Tech Academy',\r\n            issueDate: '2024-01-15',\r\n            isValid: true\r\n          }\r\n        }\r\n      }).as('verifySuccess');\r\n\r\n      cy.get('[data-testid=\"verify-input\"]').type('test-certificate-id');\r\n      cy.get('[data-testid=\"verify-button\"]').click();\r\n      cy.wait('@verifySuccess');\r\n\r\n      // Test share functionality\r\n      cy.get('[data-testid=\"share-button\"]').click();\r\n      cy.get('[role=\"dialog\"]').should('be.visible');\r\n      cy.contains('Share Certificate').should('be.visible');\r\n\r\n      // Test download functionality\r\n      cy.get('[data-testid=\"download-button\"]').click();\r\n      // Should trigger download (can't easily test file download in Cypress)\r\n    });\r\n  });\r\n\r\n  describe('Certificate Card', () => {\r\n    beforeEach(() => {\r\n      cy.visit('/certificates');\r\n    });\r\n\r\n    it('should display certificate information', () => {\r\n      // Mock certificates data\r\n      cy.intercept('GET', '/api/certificates', {\r\n        statusCode: 200,\r\n        body: [\r\n          {\r\n            id: '123',\r\n            recipientName: 'John Doe',\r\n            courseName: 'React Development',\r\n            institution: 'Tech Academy',\r\n            issueDate: '2024-01-15',\r\n            isValid: true\r\n          }\r\n        ]\r\n      }).as('getCertificates');\r\n\r\n      cy.wait('@getCertificates');\r\n\r\n      // Certificate information should be displayed\r\n      cy.contains('John Doe').should('be.visible');\r\n      cy.contains('React Development').should('be.visible');\r\n      cy.contains('Tech Academy').should('be.visible');\r\n      cy.get('[data-testid=\"check-icon\"]').should('be.visible');\r\n    });\r\n\r\n    it('should handle certificate actions', () => {\r\n      cy.intercept('GET', '/api/certificates', {\r\n        statusCode: 200,\r\n        body: [\r\n          {\r\n            id: '123',\r\n            recipientName: 'John Doe',\r\n            courseName: 'React Development',\r\n            institution: 'Tech Academy',\r\n            issueDate: '2024-01-15',\r\n            isValid: true\r\n          }\r\n        ]\r\n      }).as('getCertificates');\r\n\r\n      cy.wait('@getCertificates');\r\n\r\n      // Test share action\r\n      cy.get('[data-testid=\"share-icon\"]').first().click();\r\n      cy.get('[role=\"dialog\"]').should('be.visible');\r\n\r\n      // Close share dialog\r\n      cy.get('[data-testid=\"close-icon\"]').click();\r\n\r\n      // Test download action\r\n      cy.get('[data-testid=\"download-icon\"]').first().click();\r\n      // Download should be triggered\r\n    });\r\n  });\r\n\r\n  describe('Analytics Dashboard', () => {\r\n    beforeEach(() => {\r\n      cy.visit('/analytics');\r\n    });\r\n\r\n    it('should display analytics data', () => {\r\n      // Mock analytics data\r\n      cy.intercept('GET', '/api/analytics', {\r\n        statusCode: 200,\r\n        body: {\r\n          totalCertificates: 150,\r\n          validCertificates: 145,\r\n          invalidCertificates: 5,\r\n          recentActivity: [\r\n            { date: '2024-01-15', count: 10 },\r\n            { date: '2024-01-14', count: 8 }\r\n          ]\r\n        }\r\n      }).as('getAnalytics');\r\n\r\n      cy.wait('@getAnalytics');\r\n\r\n      // Analytics data should be displayed\r\n      cy.contains('150').should('be.visible');\r\n      cy.contains('145').should('be.visible');\r\n      cy.contains('5').should('be.visible');\r\n      \r\n      // Charts should be rendered\r\n      cy.get('[data-testid=\"chart-icon\"]').should('be.visible');\r\n    });\r\n  });\r\n\r\n  describe('Settings Panel', () => {\r\n    beforeEach(() => {\r\n      cy.visit('/settings');\r\n    });\r\n\r\n    it('should display and update settings', () => {\r\n      // Settings sections should be visible\r\n      cy.contains('Profile Settings').should('be.visible');\r\n      cy.contains('Notification Preferences').should('be.visible');\r\n      cy.contains('Theme').should('be.visible');\r\n\r\n      // Test toggle switches\r\n      cy.get('[role=\"switch\"]').first().click();\r\n      cy.get('[role=\"switch\"]').first().should('have.attr', 'aria-checked', 'true');\r\n\r\n      // Test save functionality\r\n      cy.contains('Save Settings').click();\r\n      cy.contains('Settings saved successfully').should('be.visible');\r\n    });\r\n  });\r\n\r\n  describe('Feedback Animations', () => {\r\n    it('should display success feedback', () => {\r\n      cy.visit('/');\r\n      \r\n      // Trigger success action\r\n      cy.get('[data-testid=\"success-trigger\"]').click();\r\n      \r\n      // Success toast should appear\r\n      cy.get('[role=\"status\"]').should('be.visible');\r\n      cy.contains('Success!').should('be.visible');\r\n      cy.get('[data-testid=\"check-icon\"]').should('be.visible');\r\n      \r\n      // Toast should auto-dismiss\r\n      cy.get('[role=\"status\"]', { timeout: 5000 }).should('not.exist');\r\n    });\r\n\r\n    it('should display error feedback', () => {\r\n      // Trigger error action\r\n      cy.get('[data-testid=\"error-trigger\"]').click();\r\n      \r\n      // Error toast should appear\r\n      cy.get('[role=\"status\"]').should('be.visible');\r\n      cy.contains('Error occurred!').should('be.visible');\r\n      cy.get('[data-testid=\"x-icon\"]').should('be.visible');\r\n    });\r\n  });\r\n\r\n  describe('Responsive Design', () => {\r\n    it('should adapt to mobile viewport', () => {\r\n      cy.viewport(375, 667);\r\n      \r\n      // Bottom navigation should be visible on mobile\r\n      cy.get('[role=\"tablist\"]').should('be.visible');\r\n      \r\n      // FAB should be positioned correctly\r\n      cy.get('[aria-label*=\"action\"]').should('have.class', 'bottom-6');\r\n      \r\n      // Cards should stack vertically\r\n      cy.get('[data-testid=\"certificate-card\"]').should('have.css', 'width');\r\n    });\r\n\r\n    it('should adapt to tablet viewport', () => {\r\n      cy.viewport(768, 1024);\r\n      \r\n      // Layout should adapt for tablet\r\n      cy.get('[data-testid=\"main-content\"]').should('be.visible');\r\n      \r\n      // Navigation should be appropriate for tablet\r\n      cy.get('[role=\"tablist\"]').should('be.visible');\r\n    });\r\n\r\n    it('should adapt to desktop viewport', () => {\r\n      cy.viewport(1280, 720);\r\n      \r\n      // Desktop layout should be used\r\n      cy.get('[data-testid=\"desktop-layout\"]').should('be.visible');\r\n      \r\n      // Side navigation might be visible on desktop\r\n      cy.get('[data-testid=\"side-nav\"]').should('be.visible');\r\n    });\r\n  });\r\n\r\n  describe('Accessibility', () => {\r\n    it('should support keyboard navigation', () => {\r\n      // Tab through interactive elements\r\n      cy.get('body').tab();\r\n      cy.focused().should('be.visible');\r\n      \r\n      // Continue tabbing through all focusable elements\r\n      for (let i = 0; i < 10; i++) {\r\n        cy.focused().tab();\r\n        cy.focused().should('be.visible');\r\n      }\r\n    });\r\n\r\n    it('should provide proper ARIA labels', () => {\r\n      // Check for ARIA labels on interactive elements\r\n      cy.get('[role=\"button\"]').should('have.attr', 'aria-label');\r\n      cy.get('[role=\"tablist\"]').should('exist');\r\n      cy.get('[role=\"tab\"]').should('have.attr', 'aria-selected');\r\n    });\r\n\r\n    it('should support screen readers', () => {\r\n      // Check for screen reader announcements\r\n      cy.get('[role=\"status\"]').should('have.attr', 'aria-live');\r\n      cy.get('[aria-describedby]').should('exist');\r\n      \r\n      // Check for proper heading structure\r\n      cy.get('h1').should('exist');\r\n      cy.get('h2').should('exist');\r\n    });\r\n  });\r\n\r\n  describe('Performance', () => {\r\n    it('should load quickly', () => {\r\n      cy.visit('/', {\r\n        onBeforeLoad: (win) => {\r\n          win.performance.mark('start');\r\n        },\r\n        onLoad: (win) => {\r\n          win.performance.mark('end');\r\n          win.performance.measure('pageLoad', 'start', 'end');\r\n          const measure = win.performance.getEntriesByName('pageLoad')[0];\r\n          expect(measure.duration).to.be.lessThan(3000); // 3 seconds\r\n        }\r\n      });\r\n    });\r\n\r\n    it('should handle large datasets efficiently', () => {\r\n      // Mock large dataset\r\n      const largeCertificateList = Array.from({ length: 100 }, (_, i) => ({\r\n        id: `cert-${i}`,\r\n        recipientName: `User ${i}`,\r\n        courseName: `Course ${i}`,\r\n        institution: 'Test Institution',\r\n        issueDate: '2024-01-15',\r\n        isValid: true\r\n      }));\r\n\r\n      cy.intercept('GET', '/api/certificates', {\r\n        statusCode: 200,\r\n        body: largeCertificateList\r\n      }).as('getLargeCertificateList');\r\n\r\n      cy.visit('/certificates');\r\n      cy.wait('@getLargeCertificateList');\r\n\r\n      // Page should still be responsive\r\n      cy.get('[data-testid=\"certificate-card\"]').should('have.length.at.least', 10);\r\n      \r\n      // Scrolling should be smooth\r\n      cy.scrollTo('bottom');\r\n      cy.scrollTo('top');\r\n    });\r\n  });\r\n\r\n  describe('Print Functionality', () => {\r\n    it('should provide print-friendly certificate display', () => {\r\n      cy.visit('/certificates/123');\r\n      \r\n      // Print button should be available\r\n      cy.get('[data-testid=\"print-button\"]').should('be.visible');\r\n      \r\n      // Click print button\r\n      cy.get('[data-testid=\"print-button\"]').click();\r\n      \r\n      // Print dialog should open (browser-dependent)\r\n      // We can't easily test the actual print dialog, but we can verify\r\n      // that print styles are applied\r\n      cy.get('[data-testid=\"certificate-content\"]').should('have.class', 'print-friendly');\r\n    });\r\n  });\r\n});"
        }
      ]
    },
    "styles": {
      "passed": 1,
      "failed": 0,
      "details": [
        {
          "file": "src/styles/print.css",
          "exists": true,
          "hasContent": true,
          "lineCount": 287,
          "content": "/* Print-friendly styles for certificates */\r\n@media print {\r\n  /* Hide unnecessary elements */\r\n  .print\\\\:hidden,\r\n  nav,\r\n  header,\r\n  footer,\r\n  .no-print {\r\n    display: none !important;\r\n  }\r\n\r\n  /* Reset page margins */\r\n  @page {\r\n    margin: 0.5in;\r\n    size: A4;\r\n  }\r\n\r\n  /* Body styles */\r\n  body {\r\n    font-family: 'Times New Roman', serif;\r\n    font-size: 12pt;\r\n    line-height: 1.4;\r\n    color: #000;\r\n    background: white;\r\n  }\r\n\r\n  /* Certificate card styles */\r\n  .certificate-card {\r\n    page-break-inside: avoid;\r\n    margin-bottom: 1in;\r\n    border: 2px solid #000;\r\n    padding: 0.5in;\r\n    background: white;\r\n  }\r\n\r\n  /* Certificate header */\r\n  .certificate-header {\r\n    text-align: center;\r\n    margin-bottom: 0.5in;\r\n    border-bottom: 1px solid #000;\r\n    padding-bottom: 0.25in;\r\n  }\r\n\r\n  .certificate-title {\r\n    font-size: 24pt;\r\n    font-weight: bold;\r\n    margin-bottom: 0.25in;\r\n    color: #000;\r\n  }\r\n\r\n  .certificate-subtitle {\r\n    font-size: 14pt;\r\n    color: #666;\r\n  }\r\n\r\n  /* Certificate body */\r\n  .certificate-body {\r\n    margin: 0.5in 0;\r\n  }\r\n\r\n  .certificate-recipient {\r\n    text-align: center;\r\n    font-size: 18pt;\r\n    font-weight: bold;\r\n    margin: 0.5in 0;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  .certificate-course {\r\n    text-align: center;\r\n    font-size: 16pt;\r\n    font-weight: bold;\r\n    margin: 0.25in 0;\r\n  }\r\n\r\n  .certificate-institution {\r\n    text-align: center;\r\n    font-size: 14pt;\r\n    margin: 0.25in 0;\r\n  }\r\n\r\n  .certificate-date {\r\n    text-align: center;\r\n    font-size: 12pt;\r\n    margin: 0.25in 0;\r\n  }\r\n\r\n  /* Certificate details grid */\r\n  .certificate-details {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 0.5in;\r\n    margin: 0.5in 0;\r\n  }\r\n\r\n  .certificate-detail-item {\r\n    margin-bottom: 0.25in;\r\n  }\r\n\r\n  .certificate-detail-label {\r\n    font-weight: bold;\r\n    font-size: 10pt;\r\n    color: #666;\r\n    margin-bottom: 0.1in;\r\n  }\r\n\r\n  .certificate-detail-value {\r\n    font-size: 11pt;\r\n    color: #000;\r\n  }\r\n\r\n  /* Blockchain info */\r\n  .blockchain-info {\r\n    border-top: 1px solid #ccc;\r\n    padding-top: 0.25in;\r\n    margin-top: 0.5in;\r\n  }\r\n\r\n  .blockchain-info h4 {\r\n    font-size: 12pt;\r\n    font-weight: bold;\r\n    margin-bottom: 0.25in;\r\n  }\r\n\r\n  .blockchain-hash {\r\n    font-family: 'Courier New', monospace;\r\n    font-size: 8pt;\r\n    word-break: break-all;\r\n    background: #f5f5f5;\r\n    padding: 0.1in;\r\n    border: 1px solid #ddd;\r\n  }\r\n\r\n  /* QR Code */\r\n  .qr-code-container {\r\n    text-align: center;\r\n    margin: 0.25in 0;\r\n  }\r\n\r\n  .qr-code {\r\n    width: 1.5in;\r\n    height: 1.5in;\r\n    border: 1px solid #000;\r\n  }\r\n\r\n  .qr-code-label {\r\n    font-size: 8pt;\r\n    margin-top: 0.1in;\r\n  }\r\n\r\n  /* Certificate footer */\r\n  .certificate-footer {\r\n    border-top: 1px solid #000;\r\n    padding-top: 0.25in;\r\n    margin-top: 0.5in;\r\n    text-align: center;\r\n    font-size: 10pt;\r\n    color: #666;\r\n  }\r\n\r\n  /* Verification info */\r\n  .verification-info {\r\n    margin-top: 0.25in;\r\n    padding: 0.25in;\r\n    border: 1px solid #ddd;\r\n    background: #f9f9f9;\r\n  }\r\n\r\n  .verification-url {\r\n    font-family: 'Courier New', monospace;\r\n    font-size: 8pt;\r\n    word-break: break-all;\r\n  }\r\n\r\n  /* Status indicators */\r\n  .status-verified {\r\n    color: #006600;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .status-invalid {\r\n    color: #cc0000;\r\n    font-weight: bold;\r\n  }\r\n\r\n  /* Hide interactive elements */\r\n  button,\r\n  .button,\r\n  input[type=\"button\"],\r\n  input[type=\"submit\"],\r\n  .interactive {\r\n    display: none !important;\r\n  }\r\n\r\n  /* Ensure proper page breaks */\r\n  .page-break-before {\r\n    page-break-before: always;\r\n  }\r\n\r\n  .page-break-after {\r\n    page-break-after: always;\r\n  }\r\n\r\n  .page-break-inside-avoid {\r\n    page-break-inside: avoid;\r\n  }\r\n\r\n  /* Certificate border decoration */\r\n  .certificate-border {\r\n    border: 3px double #000;\r\n    padding: 0.25in;\r\n    margin: 0.25in;\r\n  }\r\n\r\n  /* Signature lines */\r\n  .signature-section {\r\n    margin-top: 1in;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 1in;\r\n  }\r\n\r\n  .signature-line {\r\n    border-bottom: 1px solid #000;\r\n    height: 0.5in;\r\n    margin-bottom: 0.1in;\r\n  }\r\n\r\n  .signature-label {\r\n    text-align: center;\r\n    font-size: 10pt;\r\n    color: #666;\r\n  }\r\n\r\n  /* Watermark */\r\n  .certificate-watermark {\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) rotate(-45deg);\r\n    font-size: 72pt;\r\n    color: rgba(0, 0, 0, 0.05);\r\n    z-index: -1;\r\n    pointer-events: none;\r\n  }\r\n\r\n  /* Force black and white printing */\r\n  * {\r\n    -webkit-print-color-adjust: exact !important;\r\n    color-adjust: exact !important;\r\n    print-color-adjust: exact !important;\r\n  }\r\n\r\n  /* Ensure proper font rendering */\r\n  .certificate-text {\r\n    font-family: 'Times New Roman', serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  }\r\n}\r\n\r\n/* Print button styles (visible on screen) */\r\n@media screen {\r\n  .print-button {\r\n    background: #4f46e5;\r\n    color: white;\r\n    border: none;\r\n    padding: 0.5rem 1rem;\r\n    border-radius: 0.375rem;\r\n    cursor: pointer;\r\n    font-size: 0.875rem;\r\n    font-weight: 500;\r\n    transition: background-color 0.2s;\r\n  }\r\n\r\n  .print-button:hover {\r\n    background: #4338ca;\r\n  }\r\n\r\n  .print-preview {\r\n    border: 1px solid #e5e7eb;\r\n    padding: 1rem;\r\n    margin: 1rem 0;\r\n    background: white;\r\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\r\n  }\r\n}"
        }
      ]
    }
  },
  "criticalIssues": []
}